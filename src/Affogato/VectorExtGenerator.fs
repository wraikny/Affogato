module internal VectorExtGenerator

let private fields = "xyzw"

let private formatting x = x |> Seq.map (sprintf "  %s")

let private accessor2 =
  seq {
    yield "let inline private kk v k1 k2 = Vector2.init (k1 v) (k2 v)"
    for k1 in fields do
    for k2 in fields do
      let name = sprintf "%c%c" k1 k2
      yield sprintf "let inline %s (v : '``Vector<'a>``) = kk v %c %c" name k1 k2
  }
  |> formatting

let private accessor3 =
  seq {
    yield "let inline private kkk v k1 k2 k3 = Vector3.init (k1 v) (k2 v) (k3 v)"
    for k1 in fields do
    for k2 in fields do
    for k3 in fields do
      let name = sprintf "%c%c%c" k1 k2 k3
      yield sprintf "let inline %s (v : '``Vector<'a>``) = kkk v %c %c %c" name k1 k2 k3
  }
  |> formatting

let private accessor4 =
  seq {
    yield "let inline private kkkk v k1 k2 k3 k4 = Vector4.init (k1 v) (k2 v) (k3 v) (k4 v)"
    for k1 in fields do
    for k2 in fields do
    for k3 in fields do
    for k4 in fields do
      let name = sprintf "%c%c%c%c" k1 k2 k3 k4
      yield sprintf "let inline %s (v : '``Vector<'a>``) = kkkk v %c %c %c %c" name k1 k2 k3 k4
  }
  |> formatting

let private declare n =
  let fields = Seq.take n fields
  let members =
    seq {
      if n >= 2 then
        for k1 in fields do
        for k2 in fields do
          let name = sprintf "%c%c" k1 k2
          yield sprintf "member inline this.%s = Vector.%s this" name name
      if n >= 3 then
        for k1 in fields do
        for k2 in fields do
        for k3 in fields do
          let name = sprintf "%c%c%c" k1 k2 k3
          yield sprintf "member inline this.%s = Vector.%s this" name name
      if n >= 4 then
        for k1 in fields do
        for k2 in fields do
        for k3 in fields do
        for k4 in fields do
          let name = sprintf "%c%c%c%c" k1 k2 k3 k4
          yield sprintf "member inline this.%s = Vector.%s this" name name
    }
    |> formatting
    |> String.concat "\n"

  sprintf
    """
type Vector%d< ^a
    when ^a: (static member Zero: ^a)
    and  ^a: (static member One: ^a)
    and ^a: struct
  > with
%s
"""
    n members

let source =
  seq {
    yield """(*
This file is generated by fake.
Do not edit directly.
*)
[<AutoOpen>]
module Affogato.VectorExt
#nowarn "0064"
"""
    yield "module Vector ="
    for k in fields ->
      sprintf "  let inline private %c v = Vector.%c v" k k
    yield! accessor2
    yield! accessor3
    yield! accessor4

    yield """
#nowarn "0045"
"""

    yield declare 2
    yield declare 3
    yield declare 4
  }
  |> Seq.toList
